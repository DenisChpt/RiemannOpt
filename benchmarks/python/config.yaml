# RiemannOpt Benchmark Configuration

# Test sizes for different scenarios
sizes:
  tiny:
    sphere: [10, 50, 100]
    stiefel: [[10, 5], [20, 10], [50, 20]]
    grassmann: [[10, 5], [20, 10], [50, 20]]
    spd: [5, 10, 20]
    hyperbolic: [10, 50, 100]
    
  small:
    sphere: [100, 500, 1000]
    stiefel: [[100, 20], [200, 50], [500, 100]]
    grassmann: [[100, 20], [200, 50], [500, 100]]
    spd: [20, 50, 100]
    hyperbolic: [100, 500, 1000]
    
  medium:
    sphere: [1000, 5000, 10000]
    stiefel: [[500, 100], [1000, 200], [2000, 500]]
    grassmann: [[500, 100], [1000, 200], [2000, 500]]
    spd: [100, 200, 500]
    hyperbolic: [1000, 5000, 10000]
    
  large:
    sphere: [10000, 50000, 100000]
    stiefel: [[2000, 500], [5000, 1000], [10000, 2000]]
    grassmann: [[2000, 500], [5000, 1000], [10000, 2000]]
    spd: [500, 1000, 2000]
    hyperbolic: [10000, 50000, 100000]
    
  huge:
    sphere: [100000, 500000, 1000000]
    stiefel: [[10000, 2000], [20000, 5000], [50000, 10000]]
    grassmann: [[10000, 2000], [20000, 5000], [50000, 10000]]
    spd: [2000, 5000, 10000]
    hyperbolic: [100000, 500000, 1000000]

# Optimization parameters
optimization:
  iterations: 100
  tolerance: 1e-6
  step_sizes:
    sgd: 0.01
    adam: 0.001
  
# Benchmark parameters
benchmark:
  warmup_rounds: 5
  measurement_rounds: 20
  timeout_seconds: 300
  
# Libraries to compare
libraries:
  - riemannopt
  - pymanopt
  # - geomstats
  # - jax_manifolds  # Optional, if available
  
# Operations to benchmark
operations:
  basic:
    - projection
    - retraction
    - tangent_projection
    - inner_product
    - distance
    
  advanced:
    - exponential_map
    - logarithmic_map
    - parallel_transport
    
  optimization:
    - sgd_convergence
    - adam_convergence
    - full_optimization
    
# Output settings
output:
  format: ["console", "csv", "json", "html"]
  save_raw_data: true
  plot_results: true
  output_dir: "results"