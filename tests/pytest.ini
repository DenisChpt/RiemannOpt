[pytest]
# pytest configuration for RiemannOpt tests

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test output configuration
addopts = 
    -v
    --strict-markers
    --tb=short
    --color=yes
    -p no:warnings

# Test organization
testpaths = 
    unit
    integration
    benchmarks
    numerical

# Marker descriptions
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    numerical: marks numerical accuracy tests
    benchmark: marks performance benchmark tests
    integration: marks integration tests
    manifold: marks manifold-specific tests
    optimizer: marks optimizer-specific tests
    gpu: marks tests requiring GPU
    experimental: marks tests for experimental features

# Coverage configuration
[coverage:run]
source = riemannopt
omit = 
    */tests/*
    */benchmarks/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING: